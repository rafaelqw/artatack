"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const sqlite3 = require("sqlite3");
class _ConnectionPool extends _1.ConnectionPool {
    constructor(options) {
        super();
        this.options = options;
    }
    getConnection() {
        return new Promise((resolve, reject) => {
            const connection = new sqlite3.Database(this.options.database, undefined, error => {
                if (error)
                    reject(Error(error));
                resolve(new _Connection(connection, true));
            });
        });
    }
    close() {
        return Promise.resolve();
    }
    escape(value) {
        return escapeString(value);
    }
    escapeId(name) {
        return escapeId(name);
    }
}
class _Connection extends _1.Connection {
    constructor(options, connected) {
        super();
        this.dialect = 'sqlite3';
        this.queryCounter = new _1.QueryCounter();
        if (connected) {
            this.connection = options;
        }
        else {
            this.connection = new sqlite3.Database(options.database);
        }
    }
    release() {
        this.disconnect();
    }
    query(sql) {
        this.queryCounter.total++;
        return new Promise((resolve, reject) => this.connection.query(sql, (error, results, fields) => {
            if (error) {
                return reject(error);
            }
            if (Array.isArray(results)) {
                resolve(results);
            }
            else if (results.insertId) {
                resolve(results.insertId);
            }
            else {
                resolve(results.changedRows);
            }
        }));
    }
    transaction(callback) {
        return new Promise((resolve, reject) => {
            return this.connection.beginTransaction(error => {
                if (error)
                    return reject(error);
                let promise;
                try {
                    promise = callback(this);
                }
                catch (error) {
                    return this.connection.rollback(() => {
                        reject(error);
                    });
                }
                if (promise instanceof Promise) {
                    return promise
                        .then(result => this.connection.commit(error => {
                        if (error) {
                            return this.connection.rollback(() => {
                                reject(error);
                            });
                        }
                        else {
                            resolve(result);
                        }
                    }))
                        .catch(reason => this.connection.rollback(() => {
                        reject(reason);
                    }));
                }
                else {
                    resolve();
                }
            });
        });
    }
    commit() {
        return new Promise((resolve, reject) => {
            this.connection.commit(error => {
                if (error)
                    reject(error);
                else
                    resolve();
            });
        });
    }
    rollback() {
        return new Promise((resolve, reject) => {
            this.connection.rollback(error => {
                if (error)
                    reject(error);
                else
                    resolve();
            });
        });
    }
    disconnect() {
        return new Promise((resolve, reject) => {
            this.connection.close(err => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    escape(value) {
        return escapeString(value);
    }
    escapeId(name) {
        return escapeId(name);
    }
}
function escapeString(value) {
    return `'${value.replace(/'/g, "''")}'`;
}
function escapeId(name) {
    return `'${name}'`;
}
exports.default = {
    createConnectionPool: (options) => {
        return new _ConnectionPool(options);
    },
    createConnection: (options) => {
        return new _Connection(options);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsaXRlMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmdpbmUvc3FsaXRlMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdCQUtXO0FBRVgsbUNBQW9DO0FBRXBDLHFCQUFzQixTQUFRLGlCQUFjO0lBRzFDLFlBQVksT0FBTztRQUNqQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUNyQixTQUFTLEVBQ1QsS0FBSyxDQUFDLEVBQUU7Z0JBQ04sSUFBSSxLQUFLO29CQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsT0FBTyxDQUFDLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNsQixPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVk7UUFDbkIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBRUQsaUJBQWtCLFNBQVEsYUFBVTtJQUtsQyxZQUFZLE9BQU8sRUFBRSxTQUFtQjtRQUN0QyxLQUFLLEVBQUUsQ0FBQztRQUxWLFlBQU8sR0FBVyxTQUFTLENBQUM7UUFFNUIsaUJBQVksR0FBaUIsSUFB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