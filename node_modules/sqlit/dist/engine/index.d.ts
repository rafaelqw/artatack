import { getInformationSchema } from './information_schema';
export interface ConnectionInfo {
    dialect: string;
    connection: any;
}
export declare type Value = string | number | boolean | Date | null;
export declare type Row = {
    [key: string]: Value;
};
export declare class QueryCounter {
    total: number;
}
export declare type TransactionCallback = (connection: Connection) => Promise<any> | void;
export interface Dialect {
    dialect: string;
    escape: (unsafe: any) => string;
    escapeId: (unsafe: string) => string;
}
export declare abstract class Connection implements Dialect {
    dialect: string;
    connection: any;
    queryCounter: QueryCounter;
    abstract query(sql: string): Promise<any>;
    abstract transaction(callback: TransactionCallback): Promise<any>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    abstract disconnect(): Promise<any>;
    abstract release(): any;
    abstract escape(s: string): string;
    abstract escapeId(name: string): string;
}
export declare abstract class ConnectionPool implements Dialect {
    dialect: string;
    abstract getConnection(): Promise<Connection>;
    abstract close(): Promise<any>;
    abstract escape(s: string): string;
    abstract escapeId(name: string): string;
}
export declare function createConnectionPool(dialect: string, connection: any): ConnectionPool;
export declare function createConnection(dialect: string, connection: any): Connection;
export { getInformationSchema };
