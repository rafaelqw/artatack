"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PLURAL_FORMS = {
    child: 'children'
};
function pluralise(name) {
    for (const key in PLURAL_FORMS) {
        if (name.endsWith(key)) {
            return name.substr(0, name.length - key.length) + PLURAL_FORMS[key];
        }
        if (name.endsWith(_U(key))) {
            return name.substr(0, name.length - key.length) + _U(PLURAL_FORMS[key]);
        }
    }
    let result;
    if ((result = name.replace(/([^aeiou])y$/i, '$1ies')) != name) {
        return result;
    }
    if ((result = name.replace(/ty$/, 'ties')) != name) {
        return result;
    }
    if ((result = name.replace(/s$/, 'ses')) != name) {
        return result;
    }
    return name + 's';
}
exports.pluralise = pluralise;
function _U(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
function setPluralForms(data) {
    for (const key in data) {
        PLURAL_FORMS[key] = data[key];
    }
}
exports.setPluralForms = setPluralForms;
function setPluralForm(singular, plural) {
    PLURAL_FORMS[singular] = plural;
}
exports.setPluralForm = setPluralForm;
function toCamelCase(s) {
    return s.replace(/_\w/g, m => m[1].toUpperCase());
}
exports.toCamelCase = toCamelCase;
function toPascalCase(s) {
    s = toCamelCase(s);
    return s[0].toUpperCase() + s.substr(1);
}
exports.toPascalCase = toPascalCase;
function toArray(args) {
    return Array.isArray(args) ? args : [args];
}
exports.toArray = toArray;
const reflect = p => p.then(value => ({ value }), error => ({ error }));
function promiseAll(promises) {
    return Promise.all(promises.map(reflect)).then(results => {
        const error = results.find(result => 'error' in result);
        if (error) {
            throw error.error;
        }
        else {
            return results.map(result => result.value);
        }
    });
}
exports.promiseAll = promiseAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9taXNjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxZQUFZLEdBQUc7SUFDbkIsS0FBSyxFQUFFLFVBQVU7Q0FDbEIsQ0FBQztBQUVGLG1CQUEwQixJQUFZO0lBQ3BDLEtBQUssTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFO1FBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyRTtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN6RTtLQUNGO0lBRUQsSUFBSSxNQUFNLENBQUM7SUFFWCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO1FBQzdELE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ2xELE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ2hELE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLElBQUksR0FBRyxHQUFHLENBQUM7QUFDcEIsQ0FBQztBQXpCRCw4QkF5QkM7QUFFRCxZQUFZLENBQVM7SUFDbkIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELHdCQUErQixJQUErQjtJQUM1RCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQy9CO0FBQ0gsQ0FBQztBQUpELHdDQUlDO0FBRUQsdUJBQThCLFFBQWdCLEVBQUUsTUFBYztJQUM1RCxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ2xDLENBQUM7QUFGRCxzQ0FFQztBQUVELHFCQUE0QixDQUFTO0lBQ25DLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsa0NBRUM7QUFFRCxzQkFBNkIsQ0FBUztJQUNwQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUhELG9DQUdDO0FBRUQsaUJBQXdCLElBQUk7SUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUZELDBCQUVDO0FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXhFLG9CQUEyQixRQUF3QjtJQUNqRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2RCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ25CO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFURCxnQ0FTQyJ9