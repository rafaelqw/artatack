"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getInformationSchema(connection, schemaName) {
    return new Builder(connection, schemaName).getResult();
}
exports.getInformationSchema = getInformationSchema;
class Builder {
    constructor(connection, schemaName) {
        this.connection = connection;
        this.schemaName = schemaName;
        this.escapedSchemaName = connection.escape(schemaName);
    }
    getResult() {
        return Promise.all([
            this.getTables(),
            this.getColumns(),
            this.getTableConstraints(),
            this.getKeyColumnUsage()
        ]).then(result => {
            const [tableSet, tableColumnsMap, tableConstraintMap, tableConstraintColumnsMap] = result;
            const schemaInfo = {
                name: this.schemaName,
                tables: []
            };
            for (const tableName in tableColumnsMap) {
                if (!tableSet.has(tableName))
                    continue;
                const tableInfo = {
                    name: tableName,
                    columns: tableColumnsMap[tableName],
                    constraints: []
                };
                for (const constraintName in tableConstraintMap[tableName]) {
                    const type = tableConstraintMap[tableName][constraintName];
                    const columns = tableConstraintColumnsMap[tableName][constraintName];
                    const constraint = {
                        name: constraintName,
                        columns: columns.map(entry => entry[0])
                    };
                    switch (type) {
                        case 'PRIMARY KEY':
                            constraint.primaryKey = true;
                            break;
                        case 'UNIQUE':
                            constraint.unique = true;
                            break;
                        case 'FOREIGN KEY':
                            constraint.references = {
                                table: columns[0][1][0],
                                columns: columns.map(entry => entry[1][1])
                            };
                            break;
                    }
                    tableInfo.constraints.push(constraint);
                }
                schemaInfo.tables.push(tableInfo);
            }
            return schemaInfo;
        });
    }
    getTables() {
        return this.connection
            .query(`
        select table_name from information_schema.tables
        where table_schema = ${this.escapedSchemaName} and table_type = 'BASE TABLE'
        `)
            .then(rows => {
            const set = new Set();
            for (const row of rows) {
                set.add(row.table_name);
            }
            return set;
        });
    }
    getColumns() {
        return this.connection
            .query(`
        select table_name, column_name, ordinal_position, column_default,
        is_nullable, data_type, character_maximum_length, extra
        from information_schema.columns
        where table_schema = ${this.escapedSchemaName}`)
            .then(rows => {
            const map = {};
            for (const row of rows) {
                map[row.table_name] = map[row.table_name] || [];
                const columnInfo = {
                    name: row.column_name,
                    type: row.data_type,
                    nullable: row.is_nullable === 'YES'
                };
                if (/char|text/i.exec(columnInfo.type)) {
                    columnInfo.size = row.character_maximum_length;
                }
                if (/auto_increment/i.exec(row.extra)) {
                    columnInfo.autoIncrement = true;
                }
                map[row.table_name].push([row.ordinal_position, columnInfo]);
            }
            for (const tableName in map) {
                const columns = map[tableName];
                map[tableName] = columns.sort((a, b) => a[0] - b[0]).map(r => r[1]);
            }
            return map;
        });
    }
    // table_name => constraint_name => constraint_type
    getTableConstraints() {
        return this.connection
            .query(`
        select table_name, constraint_name, constraint_type
        from information_schema.table_constraints
        where table_schema = ${this.escapedSchemaName}`)
            .then(rows => {
            const map = {};
            for (const row of rows) {
                map[row.table_name] = map[row.table_name] || {};
                map[row.table_name][row.constraint_name] = row.constraint_type;
            }
            return map;
        });
    }
    // table_name => constraint_name => column_name[]
    getKeyColumnUsage() {
        return this.connection
            .query(`
        select table_name, constraint_name, column_name, ordinal_position,
        referenced_table_name, referenced_column_name
        from information_schema.key_column_usage
        where table_schema = ${this.escapedSchemaName}`)
            .then(rows => {
            const map = {};
            for (const row of rows) {
                map[row.table_name] = map[row.table_name] || {};
                map[row.table_name][row.constraint_name] =
                    map[row.table_name][row.constraint_name] || [];
                map[row.table_name][row.constraint_name].push([
                    row.ordinal_position,
                    row.column_name,
                    [row.referenced_table_name, row.referenced_column_name]
                ]);
            }
            for (const tableName in map) {
                for (const constraintName in map[tableName]) {
                    const columns = map[tableName][constraintName];
                    map[tableName][constraintName] = columns
                        .sort((a, b) => a[0] - b[0])
                        .map(r => [r[1], r[2]]);
                }
            }
            return map;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mb3JtYXRpb25fc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZ2luZS9pbmZvcm1hdGlvbl9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw4QkFDRSxVQUFzQixFQUN0QixVQUFrQjtJQUVsQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6RCxDQUFDO0FBTEQsb0RBS0M7QUFFRDtJQUtFLFlBQVksVUFBc0IsRUFBRSxVQUFrQjtRQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNqQixJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtTQUN6QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2YsTUFBTSxDQUNKLFFBQVEsRUFDUixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLHlCQUF5QixDQUMxQixHQUFHLE1BQU0sQ0FBQztZQUVYLE1BQU0sVUFBVSxHQUFHO2dCQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQ3JCLE1BQU0sRUFBRSxFQUFFO2FBQ1gsQ0FBQztZQUVGLEtBQUssTUFBTSxTQUFTLElBQUksZUFBZSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7b0JBQUUsU0FBUztnQkFDdkMsTUFBTSxTQUFTLEdBQWM7b0JB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