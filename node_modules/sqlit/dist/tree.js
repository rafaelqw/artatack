"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const filter_1 = require("./filter");
const database_1 = require("./database");
function createNode(connection, table, row) {
    const dialect = table.db.pool;
    const closure = table.closureTable;
    const closureTable = dialect.escapeId(closure.table.model.table.name);
    const ancestor = dialect.escapeId(closure.ancestor.column.name);
    const descendant = dialect.escapeId(closure.descendant.column.name);
    const keyValue = dialect.escape(table.model.keyValue(row) + '');
    let depth, depth_1, depth_0;
    if (closure.depth) {
        depth = `, ${dialect.escapeId(closure.depth.column.name)}`;
        depth_1 = `${depth} + 1`;
        depth_0 = ', 0';
    }
    else {
        depth = depth_1 = depth_0 = '';
    }
    const value = table.model.valueOf(row, table.getParentField());
    const where = value ? `= ${dialect.escape(value + '')}` : 'is null';
    const sql = `insert into ${closureTable} (${ancestor}, ${descendant}${depth}) ` +
        `select ${ancestor}, ${keyValue}${depth_1} ` +
        `from ${closureTable} where ${descendant} ${where} ` +
        `union all select ${keyValue}, ${keyValue}${depth_0}`;
    return connection.query(sql);
}
exports.createNode = createNode;
function moveSubtree(connection, table, row) {
    const escapeId = s => table.db.pool.escapeId(s);
    const escape = s => table.db.pool.escape(s);
    const closure = table.closureTable;
    const closureTable = escapeId(closure.table.model.table.name);
    const ancestor = escapeId(closure.ancestor.column.name);
    const descendant = escapeId(closure.descendant.column.name);
    const pk = escape(table.model.keyValue(row) + '');
    const deleteQuery = `
delete from ${closureTable}
where ${descendant} in (select * from (select ${descendant}
                        from  ${closureTable}
                        where ${ancestor} = ${pk}) as t1)
    and ${ancestor} in (select * from (select ${ancestor}
                        from ${closureTable}
                        where ${descendant} = ${pk}
                        and ${ancestor} != ${descendant}) as t2)
`;
    let depth, depth_1;
    if (closure.depth) {
        const name = escapeId(closure.depth.column.name);
        depth = `, ${name}`;
        depth_1 = `, t1.${name} + t2.${name} + 1`;
    }
    else {
        depth = depth_1 = '';
    }
    const parentId = table.model.valueOf(row, table.getParentField());
    const insertQuery = `
insert into ${closureTable} (${ancestor}, ${descendant}${depth})
select t1.${ancestor}, t2.${descendant}${depth_1}
from ${closureTable} as t1 cross join ${closureTable} as t2
where t1.${descendant} = ${parentId} and t2.${ancestor} = ${pk}
`;
    return connection
        .query(deleteQuery)
        .then(() => connection.query(insertQuery));
}
exports.moveSubtree = moveSubtree;
function deleteSubtree(connection, table, filter) {
    const escapeId = s => table.db.pool.escapeId(s);
    const escape = s => table.db.pool.escape(s);
    const closure = table.closureTable;
    const closureTable = escapeId(closure.table.model.table.name);
    const ancestor = escapeId(closure.ancestor.column.name);
    const descendant = escapeId(closure.descendant.column.name);
    let where;
    if (filter) {
        const pk = escapeId(table.model.keyField().name);
        const from = escapeId(table.model.table.name);
        const select = `select ${pk} from ${from} where ${filter}`;
        where = ` where ${ancestor} in (${select})`;
    }
    else {
        where = '';
    }
    const query = `
delete from ${closureTable} where ${descendant} in 
  (select * from (select ${descendant} from ${closureTable}${where}) as t)
`;
    return connection.query(query);
}
exports.deleteSubtree = deleteSubtree;
function treeQuery(connection, table, node, joinField, filter) {
    const dialect = table.db.pool;
    const t0 = dialect.escapeId(table.model.table.name);
    const t1 = dialect.escapeId(table.closureTable.table.model.table.name);
    const key = table.model.keyField();
    const value = database_1.isValue(node) ? node : table.model.keyValue(node);
    const lhs = dialect.escapeId(key.column.name);
    const rhs = dialect.escapeId(joinField.column.name);
    const field = joinField === table.closureTable.descendant
        ? dialect.escapeId(table.closureTable.ancestor.column.name)
        : dialect.escapeId(table.closureTable.descendant.column.name);
    let sql = `select ${t0}.* from ${t0} join ${t1} t1 on ${t0}.${lhs}=t1.${rhs}` +
        ` where t1.${field}=${table.escapeValue(key, value)}`;
    if (filter) {
        const additional = filter_1.encodeFilter(filter, table.model, dialect);
        if (additional) {
            sql += ` and ${additional}`;
        }
    }
    return connection
        .query(sql)
        .then(rows => rows.map(row => database_1.toDocument(row, table.model)));
}
exports.treeQuery = treeQuery;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQXdDO0FBR3hDLHlDQUEwRTtBQUUxRSxvQkFDRSxVQUFzQixFQUN0QixLQUFZLEVBQ1osR0FBYTtJQUViLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7SUFFbkMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFaEUsSUFBSSxLQUFhLEVBQUUsT0FBZSxFQUFFLE9BQWUsQ0FBQztJQUNwRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDakIsS0FBSyxHQUFHLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzNELE9BQU8sR0FBRyxHQUFHLEtBQUssTUFBTSxDQUFDO1FBQ3pCLE9BQU8sR0FBRyxLQUFLLENBQUM7S0FDakI7U0FBTTtRQUNMLEtBQUssR0FBRyxPQUFPLEdBQUcsT0FBTyxHQUFHLEVBQUUs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