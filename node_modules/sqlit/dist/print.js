"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("./model");
const _1 = require(".");
function printSchema(schema, keyword = 'interface') {
    if (!(schema instanceof model_1.Schema)) {
        schema = new model_1.Schema(schema);
    }
    const lines = [];
    for (const model of schema.models) {
        lines.push(`export ${keyword} ${model.name}`);
        lines.push(`{`);
        for (const field of model.fields) {
            let typeName;
            if (field instanceof _1.ForeignKeyField) {
                typeName = field.referencedField.model.name;
            }
            else if (field instanceof _1.SimpleField) {
                typeName = getTypeName(field.column.type);
            }
            else {
                const relatedField = field;
                if (relatedField.referencingField.isUnique()) {
                    typeName = relatedField.referencingField.model.name;
                }
                else {
                    typeName = relatedField.referencingField.model.name + '[]';
                }
            }
            let flag = '';
            if (field instanceof _1.SimpleField && !field.column.nullable) {
                flag = '?';
            }
            lines.push(`${field.name}${flag}: ${typeName};`);
        }
        lines.push(`}`);
        lines.push('');
    }
    return lines.join('\n');
}
exports.printSchema = printSchema;
function getTypeName(name) {
    if (/date|time/i.test(name)) {
        return 'Date';
    }
    if (/int|long/i.test(name)) {
        return 'number';
    }
    if (/float|double/i.test(name)) {
        return 'number';
    }
    if (/^bool/i.test(name)) {
        return 'boolean';
    }
    if (/char|text/i.test(name)) {
        return 'string';
    }
    throw Error(`Unknown type '${name}'`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBNkM7QUFDN0Msd0JBQStEO0FBRS9ELHFCQUNFLE1BQTJCLEVBQzNCLFVBQWtCLFdBQVc7SUFFN0IsSUFBSSxDQUFDLENBQUMsTUFBTSxZQUFZLGNBQU0sQ0FBQyxFQUFFO1FBQy9CLE1BQU0sR0FBRyxJQUFJLGNBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM3QjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNoQyxJQUFJLFFBQVEsQ0FBQztZQUNiLElBQUksS0FBSyxZQUFZLGtCQUFlLEVBQUU7Z0JBQ3BDLFFBQVEsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDN0M7aUJBQU0sSUFBSSxLQUFLLFlBQVksY0FBVyxFQUFFO2dCQUN2QyxRQUFRLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDM0M7aUJBQU07Z0JBQ0wsTUFBTSxZQUFZLEdBQUcsS0FBcUIsQ0FBQztnQkFDM0MsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUU7b0JBQzVDLFFBQVEsR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztpQkFDckQ7cUJBQU07b0JBQ0wsUUFBUSxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztpQkFDNUQ7YUFDRjtZQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLElBQUksS0FBSyxZQUFZLGNBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUMxRCxJQUFJLEdBQUcsR0FBRyxDQUFDO2FBQ1o7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNsRDtRQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNoQjtJQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBcENELGtDQW9DQztBQUVELHFCQUFxQixJQUFZO0lBQy9CLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzNCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsTUFBTSxLQUFLLENBQUMsaUJBQWlCLElBQUksR0FBRyxDQUFDLENBQUM7QUFDeEMsQ0FBQyJ9